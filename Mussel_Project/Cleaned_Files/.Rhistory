group_by(as.character(institution_code)) %>%
sum() %>%
arrange(desc(n)) %>%
head(5)
return(institutions)
}
get_top_museums(list_shapes[1])
#Determine the top five museums, in terms of the number of the desired specimens they hold
get_top_museums <- function(file){
f <- read.csv2(file, header = TRUE, sep = ",")
#count number of specimens from a given
institutions <- aggregate(f$individual_count,
by=list(Category = f$institution_code),
FUN = sum)
return(institutions)
}
get_top_museums(list_shapes[1])
#count number of specimens from a given
institutions <- aggregate(as.integer(f$individual_count),
by=list(Category = f$institution_code),
FUN = sum)
#Determine the top five museums, in terms of the number of the desired specimens they hold
get_top_museums <- function(file){
f <- read.csv2(file, header = TRUE, sep = ",")
#count number of specimens from a given
institutions <- aggregate(as.integer(f$individual_count),
by=list(Category = f$institution_code),
FUN = sum)
return(institutions)
}
get_top_museums(list_shapes[1])
#Determine the top five museums, in terms of the number of the desired specimens they hold
get_top_museums <- function(file){
f <- read.csv2(file, header = TRUE, sep = ",")
#count number of specimens from a given
institutions <- as.integer(f$individual_count) %>%
group_by(as.character(institution_code)) %>%
sum() %>%
arrange(desc(n)) %>%
head(5)
return(institutions)
}
get_top_museums(list_shapes[1])
#Determine the top five museums, in terms of the number of the desired specimens they hold
get_top_museums <- function(file){
f <- read.csv2(file, header = TRUE, sep = ",")
#count number of specimens from a given
institutions <- aggregate(as.integer(f$individual_count),
by=list(Category = f$institution_code),
FUN = sum)
top_institutions <- institutions %>% arrange(desc(n)) %>%
head(5)
return(top_institutions)
}
get_top_museums(list_shapes[1])
institutions <- aggregate(as.integer(f$individual_count),
by=list(Category = f$institution_code),
FUN = sum)
f <- read.csv2(Amblema_plicata.csv, header = TRUE, sep = ",")
#count number of specimens from a given
institutions <- aggregate(as.integer(f$individual_count),
by=list(Category = f$institution_code),
FUN = sum)
f <- read.csv2(Amblema_plicata.csv, header = TRUE, sep = ",")
f <- read.csv2(list_files[1], header = TRUE, sep = ",")
list_files <- dir(pattern = "*.csv") # creates the list of all the csv files in the directory
list_files #confirm the code worked properly
f <- read.csv2(list_files[1], header = TRUE, sep = ",")
#count number of specimens from a given
institutions <- aggregate(as.integer(f$individual_count),
by=list(Category = f$institution_code),
FUN = sum)
institutions
top_institutions <- institutions$Category[order(institutions$x)]
top_institutions
top_institutions <- institutions$Category[order(-institutions$x)]
top_institutions
top_institutions <- head(institutions$Category[order(-institutions$x)], 5)
top_institutions
#Determine the top five museums, in terms of the number of the desired specimens they hold
get_top_museums <- function(file){
f <- read.csv2(file, header = TRUE, sep = ",")
#count number of specimens from a given
institutions <- aggregate(as.integer(f$individual_count),
by=list(Category = f$institution_code),
FUN = sum) %>%
institutions$Category[order(-institutions$x)] %>%
head(5)
return(top_institutions)
}
get_top_museums(list_shapes[1])
#Determine the top five museums, in terms of the number of the desired specimens they hold
get_top_museums <- function(file){
f <- read.csv2(file, header = TRUE, sep = ",")
#count number of specimens from a given
institutions <- aggregate(as.integer(f$individual_count),
by=list(Category = f$institution_code),
FUN = sum)
top_institutions <- institutions$Category[order(-institutions$x)] %>%
head(5)
return(top_institutions)
}
get_top_museums(list_shapes[1])
#Determine the top five museums, in terms of the number of the desired specimens they hold
get_top_museums <- function(file){
f <- read.csv2(file, header = TRUE, sep = ",")
#count number of specimens from a given
institutions <- aggregate(as.integer(f$individual_count),
by=list(Category = f$institution_code),
FUN = sum)
top_institutions <- arrange(desc(n)) %>% head(5)
return(top_institutions)
}
get_top_museums(list_shapes[1])
#Determine the top five museums, in terms of the number of the desired specimens they hold
get_top_museums <- function(file){
f <- read.csv2(file, header = TRUE, sep = ",")
#count number of specimens from a given
institutions <- aggregate(as.integer(f$individual_count),
by=list(Category = f$institution_code),
FUN = sum)
top_institutions <- institutions %>%
institutions$Category[order(-institutions$x)] %>%
head(5)
return(top_institutions)
}
get_top_museums(list_shapes[1])
#Determine the top five museums, in terms of the number of the desired specimens they hold
get_top_museums <- function(file){
f <- read.csv2(file, header = TRUE, sep = ",")
#count number of specimens from a given
institutions <- aggregate(as.integer(f$individual_count),
by=list(Category = f$institution_code),
FUN = sum)
top_institutions <- institutions %>%
Category[order(-x)] %>%
head(5)
return(top_institutions)
}
get_top_museums(list_shapes[1])
#Determine the top five museums, in terms of the number of the desired specimens they hold
get_top_museums <- function(file){
f <- read.csv2(file, header = TRUE, sep = ",")
#count number of specimens from a given
institutions <- aggregate(as.integer(f$individual_count),
by=list(Category = f$institution_code),
FUN = sum)
return(top_institutions)
}
get_top_museums(list_shapes[1])
#Determine the top five museums, in terms of the number of the desired specimens they hold
get_top_museums <- function(file){
f <- read.csv2(file, header = TRUE, sep = ",")
#count number of specimens from a given
institutions <- aggregate(as.integer(f$individual_count),
by=list(Category = f$institution_code),
FUN = sum)
return(institutions)
}
get_top_museums(list_shapes[1])
#Determine the top five museums, in terms of the number of the desired specimens they hold
get_top_museums <- function(file){
f <- read.csv2(file, header = TRUE, sep = ",")
#count number of specimens from a given
institutions <- aggregate(as.integer(f$individual_count),
by=list(Category = f$institution_code),
FUN = sum)
top_institutions <- institutions[with(institutions, order(-x)),]
return(institutions)
}
get_top_museums(list_shapes[1])
#Determine the top five museums, in terms of the number of the desired specimens they hold
get_top_museums <- function(file){
f <- read.csv2(file, header = TRUE, sep = ",")
#count number of specimens from a given
institutions <- aggregate(as.integer(f$individual_count),
by=list(Category = f$institution_code),
FUN = sum)
top_institutions <- institutions[with(institutions, order(-x)),] %>% head(5)
return(top_institutions)
}
get_top_museums(list_shapes[1])
#Determine the top five museums, in terms of the number of the desired specimens they hold
get_top_museums <- function(file){
f <- read.csv2(file, header = TRUE, sep = ",")
#count number of specimens from a given
institutions <- aggregate(as.integer(f$individual_count),
by=list(Category = f$institution_code),
FUN = sum)
colnames(institutions) <- c("institution_code", "number_of_specimens")
top_institutions <- institutions[with(institutions, order(-number_of_specimens)),] %>% head(5)
return(top_institutions)
}
get_top_museums(list_shapes[1])
for (k in 1:length(list_files)){
print("File: ", list_files[k])
get_top_museums(list_files[k])
}
for (k in 1:length(list_files)){
print("File: " + list_files[k])
get_top_museums(list_files[k])
}
for (k in 1:length(list_files)){
print("File: ", list_files[k])
get_top_museums(list_files[k])
}
for (k in 1:length(list_files)){
print(list_files[k])
get_top_museums(list_files[k])
}
get_top_museums(list_files[k])
for (k in 1:length(list_files)){
print(list_files[k])
get_top_museums(list_files[k])
print(top_institutions)
}
for (k in 1:length(list_files)){
print(list_files[k])
print(get_top_museums(list_files[k]))
}
##For each file, determine the top five museums,
#in terms of the number of the desired specimens they hold
#save these names in a data frame
top_museums <- data.frame(matrix(0, ncol = 6, nrow = length(list_files)))
x <- c("file", "museum1", "museum2", "museum3", "museum4", "museum5")
colnames(top_museums) <- x
top_museums
for (k in 1:length(list_files)){
print(list_files[k])
print(get_top_museums(list_files[k]))
top_museums[k, 1] == list_files[k]
top_museums[k, 2:6] == get_top_museums(list_files[k])
}
for (k in 1:length(list_files)){
print(list_files[k])
print(get_top_museums(list_files[k]))
top_museums[k, 1] == list_files[k]
}
top_museums
for (k in 1:length(list_files)){
print(list_files[k])
print(get_top_museums(list_files[k]))
top_museums[k, 1] <- list_files[k]
top_museums[k, 2:6] <- get_top_museums(list_files[k])
}
top_museums
for (k in 1:length(list_files)){
print(list_files[k])
print(get_top_museums(list_files[k]))
top_museums[k, 1] <- list_files[k]
top_museums[k, 2:6] <- institution_code(get_top_museums(list_files[k]))
}
for (k in 1:length(list_files)){
print(list_files[k])
print(get_top_museums(list_files[k]))
top_museums[k, 1] <- list_files[k]
top_museums[k, 2:6] <- get_top_museums(list_files[k])$institution_code
}
top_museums
collections_per_year
##For each file, the records of occurence are plotted for all specimens,
#then for specimens from the top five museums.  The year_split
#variable is included for visualization
for (k in 1:length(list_files)){
collections_per_year <- aggregate(as.integer(f$individual_count),
by=list(Category = f$collection_year),
FUN = sum)
colnames(collections_per_year) <- c("institution_code", "number_of_specimens")
collections_per_year
}
head(collections_per_year, 5)
head(collections_per_year, 5)
##For each file, the records of occurence are plotted for all specimens,
#then for specimens from the top five museums.  The year_split
#variable is included for visualization
for (k in 1:length(list_files)){
f <- read.csv2(list_files[k], header = TRUE, sep = ",")
#count number of specimens from a given year
collections_per_year <- aggregate(as.integer(f$individual_count),
by=list(Category = f$collection_year),
FUN = sum)
colnames(collections_per_year) <- c("year", "number_of_specimens")
head(collections_per_year, 5)
}
##For each file, the records of occurence are plotted for all specimens,
#then for specimens from the top five museums.  The year_split
#variable is included for visualization
for (k in 1:length(list_files)){
f <- read.csv2(list_files[k], header = TRUE, sep = ",")
#count number of specimens from a given year
collections_per_year <- aggregate(as.integer(f$individual_count),
by=list(Category = f$collection_year),
FUN = sum)
colnames(collections_per_year) <- c("year", "number_of_specimens")
head(collections_per_year, 5)
}
##For each file, the records of occurence are plotted for all specimens,
#then for specimens from the top five museums.  The year_split
#variable is included for visualization
get_collections_per_year <- function(file){
f <- read.csv2(file, header = TRUE, sep = ",")
#count number of specimens from a given institution
collections_per_year <- aggregate(as.integer(f$individual_count),
by=list(Category = f$collection_year),
FUN = sum)
colnames(collections_per_year) <- c("institution_code", "number_of_specimens")
return(collections_per_year)
}
get_collections_per_year(Amblema_plicata.csv)
get_collections_per_year(list_files[0])
#Set working directory to project file.  This code may need to be customized
setwd("C:/Users/Mariah/CSB/Scott_Quarter_Project/Mussel_Project/")
#Define year_split.  This option allows you to choose a maximum age
#of specimens to map.  For example, you can seperately map all
#specimens that were found in the last 20 years.
year_split = 1998
#import needed libraries and install packages
install.packages("tidyverse")
install.packages("tidyverse")
#Get a list of the cleaned data files
setwd("Cleaned_Files/")
list_files <- dir(pattern = "*.csv") # creates the list of all the csv files in the directory
list_files #confirm the code worked properly
#Write a function to determine the top five museums,
#in terms of the number of the desired specimens they hold
get_top_museums <- function(file){
f <- read.csv2(file, header = TRUE, sep = ",")
#count number of specimens from a given institution
institutions <- aggregate(as.integer(f$individual_count),
by=list(Category = f$institution_code),
FUN = sum)
colnames(institutions) <- c("institution_code", "number_of_specimens")
top_institutions <- institutions[with(institutions, order(-number_of_specimens)),] %>% head(5)
return(top_institutions)
}
##For each file, determine the top five museums,
#in terms of the number of the desired specimens they hold
#save these names in a data frame for later comparisons
top_museums <- data.frame(matrix(0, ncol = 6, nrow = length(list_files)))
x <- c("file", "museum1", "museum2", "museum3", "museum4", "museum5")
colnames(top_museums) <- x
for (k in 1:length(list_files)){
print(list_files[k])
print(get_top_museums(list_files[k]))
top_museums[k, 1] <- list_files[k]
top_museums[k, 2:6] <- get_top_museums(list_files[k])$institution_code
}
##For each file, the records of occurence are plotted for all specimens,
#then for specimens from the top five museums.  The year_split
#variable is included for visualization
get_collections_per_year <- function(file){
f <- read.csv2(file, header = TRUE, sep = ",")
#count number of specimens from a given institution
collections_per_year <- aggregate(as.integer(f$individual_count),
by=list(Category = f$collection_year),
FUN = sum)
colnames(collections_per_year) <- c("institution_code", "number_of_specimens")
return(collections_per_year)
}
for (k in 1:length(list_files)){
ggplot2
}
get_collections_per_year(list_files[0])
pwd
printwd
##For each file, the records of occurence are plotted for all specimens,
#then for specimens from the top five museums.  The year_split
#variable is included for visualization
get_collections_per_year <- function(file){
f <- read.csv2(file, header = TRUE, sep = ",")
#count number of specimens from a given institution
collections_per_year <- aggregate(as.integer(f$individual_count),
by=list(Category = f$collection_year),
FUN = sum)
colnames(collections_per_year) <- c("collection_year", "number_of_specimens")
return(collections_per_year)
}
get_collections_per_year(list_files[0])
f <- read.csv2(list_files[0], header = TRUE, sep = ",")
list_files[0]
#Get a list of the cleaned data files
setwd("Cleaned_Files/")
list_files <- dir(pattern = "*.csv") # creates the list of all the csv files in the directory
list_files #confirm the code worked properly
f <- read.csv2(list_files[0], header = TRUE, sep = ",")
f <- read.csv2(list_files[1], header = TRUE, sep = ",")
f <- read.csv2(list_files[1], header = TRUE, sep = ",")
#count number of specimens from a given institution
collections_per_year <- aggregate(as.integer(f$individual_count),
by=list(Category = f$collection_year),
FUN = sum)
colnames(collections_per_year) <- c("collection_year", "number_of_specimens")
collections_per_year
for (k in 1:length(list_files)){
plot <- get_collections_per_year(list_files[k])
}
get_collections_per_year(list_files[1])
for (k in 1:length(list_files)){
plot <- get_collections_per_year(list_files[k])
ggplot2(data = plot, aes(x = collection_year, y = number_of_specimens)) +
geom_point() + geom_curve() + scale_color_gradient() + theme_bw()
}
library(tidyverse)
for (k in 1:length(list_files)){
plot <- get_collections_per_year(list_files[k])
ggplot2(data = plot, aes(x = collection_year, y = number_of_specimens)) +
geom_point() + geom_curve() + scale_color_gradient() + theme_bw()
}
ggplot(data = plot, aes(x = collection_year, y = number_of_specimens)) +
geom_point() + geom_curve() + scale_color_gradient() + theme_bw()
ggplot(data = plot, aes(x = collection_year, y = number_of_specimens)) +
geom_freqpoly() + scale_color_gradient() + theme_bw()
ggplot(data = plot, aes(x = collection_year, y = number_of_specimens)) +
geom_freqpoly() + scale_color_gradient() + theme_bw()
plot <- get_collections_per_year(list_files[1])
plot
ggplot(data = plot, aes(x = collection_year, y = number_of_specimens)) +
geom_dotplot() + scale_color_gradient() + theme_bw()
for (k in 1:length(list_files)){
plot <- get_collections_per_year(list_files[k])
ggplot(data = plot, aes(x = collection_year)) +
geom_freqpoly(binwidth = 5) + scale_color_gradient() + theme_bw()
}
plot <- get_collections_per_year(list_files[k])
ggplot(data = plot, aes(x = collection_year)) +
geom_freqpoly(binwidth = 5) + scale_color_gradient() + theme_bw()
ggplot(data = plot, aes(x = collection_year)) +
geom_bar(binwidth = 5) + scale_color_gradient() + theme_bw()
ggplot(data = plot, aes(x = collection_year)) +
geom_bar() + scale_color_gradient() + theme_bw()
f <- read.csv2(file, header = TRUE, sep = ",")
file <- list_files[1]
f <- read.csv2(file, header = TRUE, sep = ",")
ggplot(data = plot, aes(x = collection_year)) +
geom_bar() + scale_color_gradient() + theme_bw()
ggplot(data = plot, aes(x = collection_year)) +
geom_bar()
ggplot(data = f, aes(x = collection_year)) +
geom_bar()
min(f$collection_year)
min(as.int(f$collection_year))
min(integer(f$collection_year))
min(as.integer(f$collection_year))
min(as.integer(f$collection_year))
min(as.integer(collections_per_year$collection_year))
min(collections_per_year$collection_year)
plot <- get_collections_per_year(list_files[1])
ggplot(data = plot, aes(x = collection_year)) +
geom_bar() + scale_color_gradient() + theme_bw()
f <- read.csv2(file, header = TRUE, sep = ",")
ggplot(data = f, aes(x = collection_year)) +
geom_bar()
plot <- list_files[1]
ggplot(plot[!is.na(plot$collection_year),],aes(x=collection_year)) +
geom_bar() + scale_color_gradient() + theme_bw()
ggplot(plot[!is.na(plot$collection_year),],aes(x = collection_year)) +
geom_bar() + scale_color_gradient() + theme_bw()
ggplot(plot[!is.na(collection_year),],aes(x = collection_year)) +
geom_bar() + scale_color_gradient() + theme_bw()
file <- list_files[k]
file <- list_files[1]
ggplot(file[!is.na(file$collection_year),],aes(collection_year)) +
geom_bar() + scale_color_gradient() + theme_bw()
ggplot(data = file, aes(x = collection_year)) +
geom_bar() + scale_color_gradient() + theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = file, aes(x = collection_year)) +
geom_bar() + scale_color_gradient() + theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = file, aes(x = collection_year)) +
geom_bar() + scale_color_gradient() + theme_bw()
ggplot(data = file, aes(x = collection_year)) +
geom_bar() + scale_color_gradient() + theme_bw()
ggplot(data = file, aes(x = collection_year)) +
geom_bar()
file <- list_files[1]
ggplot(data = file, aes(x = collection_year)) + geom_bar()
ggplot(data = file, aes(x = collection_year)) +
geom_bar()
ggplot(data = f, aes(x = collection_year)) +
geom_bar()
file <- list_files[1]
f <- read.csv2(file, header = TRUE, sep = ",")
ggplot(data = f, aes(x = collection_year)) + geom_bar()
p + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- ggplot(data = f, aes(x = collection_year)) + geom_bar()
p <- ggplot(data = f, aes(x = collection_year)) + geom_bar()
p + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + title(main = file)
p <- ggplot(data = f, aes(x = collection_year)) + geom_bar()
p + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + title(main = file)
p <- ggplot(data = f, aes(x = collection_year)) + geom_bar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + title(main = file)
p <- ggplot(data = f, aes(x = collection_year)) + geom_bar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- ggplot(data = f, aes(x = collection_year)) + geom_bar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme_classic(labs(title = file, x = "Collection Year", y = "Count"))
p <- ggplot(data = f, aes(x = collection_year)) + geom_bar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme_classic() + labs(title = file, x = "Collection Year", y = "Count")
p <- ggplot(data = f, aes(x = collection_year)) + geom_bar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme_classic() + labs(title = file, x = "Collection Year", y = "Count")
p <- ggplot(data = f, aes(x = collection_year)) + geom_bar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme_classic()
file <- list_files[1]
f <- read.csv2(file, header = TRUE, sep = ",")
p <- ggplot(data = f, aes(x = collection_year)) + geom_bar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme_classic()
p <- ggplot(data = f, aes(x = collection_year)) + geom_bar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + title(main = file)
p <- ggplot(data = f, aes(x = collection_year)) + geom_bar() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + title(main = file)
p <- ggplot(data = f, aes(x = collection_year)) + geom_bar() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- ggplot(data = f, aes(x = collection_year)) + geom_bar()
